#!/usr/bin/env bash
# ssh.sh — SSH Audit (safe, detailed, shareable)
# Maintainer: LT4C / Minh
#
# Features:
# - In ra terminal + lưu TXT/JSON đồng thời (tee)
# - System, network, local/public IP (opt), SSH versions
# - sshd_config (important + optional raw)
# - Host key fingerprints (redactable)
# - Listening ports, sessions, logs summary
# - Users, passwd status, sudoers, PAM/login policy
# - Connection suggestions (IP/PORT/USER)
#
# Usage:
#   sudo ./ssh.sh [--redact] [--no-raw-config] [--no-keys]
#                 [--with-public-ip] [--only-connection]
#                 [--output-dir /path] [--basename name]
#                 [--format both|txt|json]
# Examples:
#   sudo ./ssh.sh --redact --with-public-ip
#   sudo ./ssh.sh --format json --output-dir /var/tmp
#
# Security: NEVER prints plaintext passwords.

set -euo pipefail

# -------- Defaults --------
REDACT=false
INCLUDE_RAW_CONFIG=true
INCLUDE_KEYS=true
WITH_PUBLIC_IP=false
ONLY_CONNECTION=false
FORMAT="both"        # both|txt|json
OUTDIR="/tmp"
BASENAME="ssh-audit"

# -------- Parse Args --------
while [[ $# -gt 0 ]]; do
  case "$1" in
    --redact) REDACT=true ;;
    --no-raw-config) INCLUDE_RAW_CONFIG=false ;;
    --no-keys) INCLUDE_KEYS=false ;;
    --with-public-ip) WITH_PUBLIC_IP=true ;;
    --only-connection) ONLY_CONNECTION=true ;;
    --output-dir) OUTDIR="${2:-/tmp}"; shift ;;
    --basename) BASENAME="${2:-ssh-audit}"; shift ;;
    --format) FORMAT="${2:-both}"; shift ;;
    -h|--help) sed -n '1,120p' "$0"; exit 0 ;;
    *) echo "Unknown option: $1" >&2; exit 1 ;;
  esac
  shift
done

# -------- Prep Outputs --------
TS="$(date +%Y%m%d-%H%M%S)"
mkdir -p "$OUTDIR"
TXT="$OUTDIR/${BASENAME}-${TS}.txt"
JSON="$OUTDIR/${BASENAME}-${TS}.json"
: > "$TXT"; : > "$JSON"

log()    { printf "%s\n" "$1" | tee -a "$TXT" >/dev/null; }
log_cmd(){ echo "\$ $*"       | tee -a "$TXT" >/dev/null; "$@" 2>&1 | tee -a "$TXT" || true; }
sep()    { log ""; }

# -------- Helpers --------
detect_service_name() {
  if command -v systemctl >/dev/null 2>&1; then
    systemctl list-unit-files 2>/dev/null | grep -q '^sshd\.service' && { echo sshd; return; }
    systemctl list-unit-files 2>/dev/null | grep -q '^ssh\.service'  && { echo ssh;  return; }
    systemctl status sshd &>/dev/null && { echo sshd; return; }
    systemctl status ssh  &>/dev/null && { echo ssh;  return; }
  fi
  echo sshd
}
first_ip4() { ip -4 -o addr show scope global 2>/dev/null | awk '{print $4}' | cut -d/ -f1 | head -n1; }
route_ip()  { ip route get 1.1.1.1 2>/dev/null | awk '/src/ {for(i=1;i<=NF;i++){if($i=="src"){print $(i+1);exit}}}'; }
public_ip() { curl -fsS --max-time 8 ifconfig.co 2>/dev/null || curl -fsS --max-time 8 ifconfig.me 2>/dev/null || true; }
json_escape(){ sed -e 's/\\/\\\\/g' -e 's/"/\\"/g'; }
print_kv_json()     { printf '  "%s": "%s",\n' "$1" "$(printf "%s" "$2" | json_escape)"; }
print_kv_json_raw() { printf '  "%s": %s,\n'   "$1" "$2"; }

# -------- Collect Facts --------
HOSTNAME="$(hostname -f 2>/dev/null || hostname)"
KERNEL="$(uname -srmo)"
UPTIME="$( (uptime -p || uptime) 2>/dev/null)"
NOW="$(date -R)"
LOCAL_IP="$(first_ip4 || route_ip || true)"
PUB_IP=""
$WITH_PUBLIC_IP && PUB_IP="$(public_ip)"

SERVICE="$(detect_service_name)"
SSHD_CONF="/etc/ssh/sshd_config"
HAS_JOURNALCTL=false; command -v journalctl >/dev/null 2>&1 && HAS_JOURNALCTL=true
HAS_SS=false;        command -v ss        >/dev/null 2>&1 && HAS_SS=true

PORT_VALUE="$(awk '/^[[:space:]]*Port[[:space:]]+/ {print $2; found=1} END{if(!found)print 22}' "$SSHD_CONF" 2>/dev/null || echo 22)"
PA_VALUE="$(grep -Ei '^[[:space:]]*PasswordAuthentication' "$SSHD_CONF" 2>/dev/null | awk '{print $2}' | tail -n1 || echo unknown)"
PK_VALUE="$(grep -Ei '^[[:space:]]*PubkeyAuthentication'   "$SSHD_CONF" 2>/dev/null | awk '{print $2}' | tail -n1 || echo unknown)"

# -------- Start TXT --------
log "SSH AUDIT REPORT - $TS"
log "Generated by: $(whoami) on $HOSTNAME ($KERNEL)"
log "CWD: $(pwd)"
log "----"

log "== System info =="
log "Hostname: $HOSTNAME"
log "Uptime: $UPTIME"
log "Kernel: $KERNEL"
log "Date: $NOW"; sep

log "== Network interfaces (IPv4/IPv6) =="
if command -v ip >/dev/null 2>&1; then log_cmd ip -brief address; else log_cmd ifconfig; fi; sep

log "== Local/Public IP =="
log "Local IP (best-effort): ${LOCAL_IP:-unknown}"
$WITH_PUBLIC_IP && log "Public IP (best-effort): ${PUB_IP:-unavailable}" || log "Public IP: (skipped; --with-public-ip)"; sep

log "== SSH client/server versions =="
log_cmd ssh -V || true
if command -v systemctl >/dev/null 2>&1; then
  log "Service: $SERVICE"
  systemctl status "$SERVICE" --no-pager 2>/dev/null | sed -n '1,10p' | tee -a "$TXT" >/dev/null || true
else
  log_cmd ps aux | grep -E '[s]shd'
fi; sep

log "== sshd_config (important settings) =="
if [[ -r "$SSHD_CONF" ]]; then
  grep -E "^(Port|ListenAddress|PermitRootLogin|PasswordAuthentication|PubkeyAuthentication|PermitEmptyPasswords|MaxAuthTries|AllowUsers|AllowGroups|Match)" "$SSHD_CONF" 2>/dev/null | sed '/^\s*#/d' | tee -a "$TXT" >/dev/null || true
else
  log "Cannot read $SSHD_CONF"
fi; sep

if $INCLUDE_RAW_CONFIG; then
  log "== Full sshd_config (raw) =="
  [[ -r "$SSHD_CONF" ]] && sed -n '1,300p' "$SSHD_CONF" | tee -a "$TXT" >/dev/null || true
else
  log "(full sshd_config omitted; enable unless sharing: --no-raw-config)"
fi; sep

log "== Host key fingerprints =="
if $INCLUDE_KEYS; then
  for f in /etc/ssh/*_key.pub 2>/dev/null; do
    [[ -f "$f" ]] || continue
    if $REDACT; then
      ssh-keygen -lf "$f" 2>/dev/null | awk '{print $1,$2" (fingerprint)"}' | tee -a "$TXT" >/dev/null || true
    else
      echo "--- $f ---" | tee -a "$TXT" >/dev/null
      ssh-keygen -lf "$f" 2>/dev/null | tee -a "$TXT" >/dev/null || true
    fi
  done
else
  log "(omitted host keys due to --no-keys)"
fi; sep

log "== Listening sockets (ssh related) =="
if $HAS_SS; then
  (ss -tnlp 2>/dev/null | grep -E 'sshd|:22' || ss -tnlp 2>/dev/null) | tee -a "$TXT" >/dev/null || true
else
  netstat -tnlp 2>/dev/null | grep -E 'sshd|:22' | tee -a "$TXT" >/dev/null || true
fi; sep

if ! $ONLY_CONNECTION; then
  log "== Active SSH sessions / users =="
  log_cmd who || true; sep

  log "== w / last summary =="
  command -v w >/dev/null 2>&1 && (w -hs | tee -a "$TXT" >/dev/null || true)
  last -n 10 2>/dev/null | tee -a "$TXT" >/dev/null || true; sep

  log "== Recent sshd logs (auth) =="
  if $HAS_JOURNALCTL; then
    journalctl -u "$SERVICE" -n 300 --no-pager 2>/dev/null | tee -a "$TXT" >/dev/null || true
  else
    if [[ -r /var/log/auth.log ]]; then
      tail -n 300 /var/log/auth.log | grep -E 'sshd|ssh' | tee -a "$TXT" >/dev/null || true
    elif [[ -r /var/log/secure ]]; then
      tail -n 300 /var/log/secure | grep -E 'sshd|ssh' | tee -a "$TXT" >/dev/null || true
    else
      log "(no journalctl and no auth log readable)"
    fi
  fi; sep

  log "== Authentication summary (from logs) =="
  if $HAS_JOURNALCTL; then
    journalctl -u "$SERVICE" --no-pager 2>/dev/null | awk '/Accepted/{a++} /Failed/{f++} END{print "Accepted:",a+0,"Failed:",f+0}' | tee -a "$TXT" >/dev/null || true
  elif [[ -r /var/log/auth.log ]]; then
    awk '/Accepted/{a++} /Failed/{f++} END{print "Accepted:",a+0,"Failed:",f+0}' /var/log/auth.log | tee -a "$TXT" >/dev/null || true
  fi; sep

  log "== Local users (UID >= 1000) and shell =="
  awk -F: '($3>=1000 && $1!="nobody"){print $1":"$6":"$7}' /etc/passwd | tee -a "$TXT" >/dev/null || true; sep

  log "== User authentication status =="
  while IFS=: read -r user _ uid _ _ home shell; do
    [[ "$uid" -ge 1000 ]] || continue
    if command -v passwd >/dev/null 2>&1; then st="$(passwd -S "$user" 2>/dev/null || echo 'noinfo')"; else st="unknown"; fi
    printf "%s -> %s\n" "$user" "$st" | tee -a "$TXT" >/dev/null
  done < /etc/passwd; sep

  log "== Root account status =="
  if id -u root &>/dev/null; then
    command -v passwd >/dev/null 2>&1 && (passwd -S root 2>/dev/null | tee -a "$TXT" >/dev/null || true)
    if [[ -r /etc/shadow ]]; then
      echo "root shadow field present (hash/lock marker shown, not plaintext)" | tee -a "$TXT" >/dev/null
    fi
  fi; sep

  log "== authorized_keys (per user) =="
  for d in /home/* /root; do
    [[ -d "$d" ]] || continue
    user="$(basename "$d")"
    ak="$d/.ssh/authorized_keys"
    if [[ -f "$ak" ]]; then
      if $REDACT; then
        printf "-- %s: %s (present, redacted)\n" "$user" "$ak" | tee -a "$TXT" >/dev/null
      else
        printf "-- %s: %s\n" "$user" "$ak" | tee -a "$TXT" >/dev/null
        sed -n '1,200p' "$ak" | nl -ba | tee -a "$TXT" >/dev/null || true
      fi
    fi
  done; sep

  log "== Sudoers (relevant lines) =="
  [[ -r /etc/sudoers ]] && grep -E -v '^\s*#' /etc/sudoers | sed -n '1,100p' | tee -a "$TXT" >/dev/null || true
  if [[ -d /etc/sudoers.d ]]; then
    for f in /etc/sudoers.d/*; do
      [[ -f "$f" ]] || continue
      printf "-> %s\n" "$f" | tee -a "$TXT" >/dev/null
      sed -n '1,80p' "$f" | tee -a "$TXT" >/dev/null || true
    done
  fi; sep

  log "== Password policy / PAM hints =="
  [[ -r /etc/login.defs ]] && grep -E 'PASS_MAX|PASS_MIN|PASS_WARN' /etc/login.defs | tee -a "$TXT" >/dev/null || true
  if command -v chage >/dev/null 2>&1; then
    echo "chage -l root:" | tee -a "$TXT" >/dev/null
    chage -l root 2>/dev/null | tee -a "$TXT" >/dev/null || true
  fi; sep
fi

# -------- Connection info (always) --------
log "== CONNECTION INFO SUGGESTIONS (no plaintext passwords) =="
if $HAS_SS; then LISTEN="$(ss -tnlp 2>/dev/null | awk '/sshd|:22/ {print $4}' | sort -u)"; else LISTEN="$(netstat -tnlp 2>/dev/null | awk '/sshd|:22/ {print $4}' | sort -u)"; fi
if [[ -n "${LISTEN:-}" ]]; then
  log "Listening endpoints:"; while read -r ep; do [[ -n "$ep" ]] && log "  - $ep"; done <<< "$LISTEN"
else
  log "(no obvious sshd listening endpoints found)"
fi
log "Local IP: ${LOCAL_IP:-unknown}"
$WITH_PUBLIC_IP && log "Public IP: ${PUB_IP:-unavailable}"
log "Port (from sshd_config or default): $PORT_VALUE"
log "PasswordAuthentication: ${PA_VALUE:-unknown}"
log "PubkeyAuthentication: ${PK_VALUE:-unknown}"

log "Candidate users:"
awk -F: '($3>=1000){print $1}' /etc/passwd | while read -r u; do
  st="unknown"; command -v passwd >/dev/null 2>&1 && st="$(passwd -S "$u" 2>/dev/null || true)"
  if { [[ -f "/home/${u}/.ssh/authorized_keys" ]] || { [[ "$u" = "root" ]] && [[ -f "/root/.ssh/authorized_keys" ]]; }; then
    keyinfo="has_authorized_keys"; else keyinfo="no_authorized_keys"; fi
  log "  - $u : $st ; $keyinfo"
done
if id -u root &>/dev/null; then rootst="$(passwd -S root 2>/dev/null || true)"; log "  - root : $rootst"; fi; sep

log "== IMPORTANT NOTES =="
log " - Script never reveals plaintext passwords."
log " - Share only (IP/PORT/USER) + public key or one-time password."; sep

# -------- JSON Output --------
if [[ "$FORMAT" == "both" || "$FORMAT" == "json" ]]; then
  {
    echo "{"
    print_kv_json "generated_at" "$TS"
    print_kv_json "hostname" "$HOSTNAME"
    print_kv_json "kernel" "$KERNEL"
    print_kv_json "local_ip" "${LOCAL_IP:-unknown}"
    if $WITH_PUBLIC_IP; then print_kv_json "public_ip" "${PUB_IP:-unavailable}"; else print_kv_json "public_ip" "skipped"; fi
    print_kv_json_raw "sshd_port" "$PORT_VALUE"
    print_kv_json "password_auth" "${PA_VALUE:-unknown}"
    print_kv_json "pubkey_auth"   "${PK_VALUE:-unknown}"
    echo '  "listening": ['
    i=0; while read -r ep; do [[ -z "$ep" ]] && continue; ((i>0)) && echo ","; printf '    "%s"' "$(printf "%s" "$ep" | json_escape)"; ((i++)); done <<< "${LISTEN:-}"; echo
    echo "  ],"
    echo '  "users": ['; i=0
    for u in $(awk -F: '($3>=1000){print $1}' /etc/passwd); do
      st="$(passwd -S "$u" 2>/dev/null || echo 'noinfo')"
      has_key="false"; [[ -f "/home/${u}/.ssh/authorized_keys" ]] && has_key="true"
      ((i>0)) && echo ","
      printf '    {"user":"%s","passwd_status":"%s","has_authorized_keys":%s}' \
        "$(printf "%s" "$u" | json_escape)" \
        "$(printf "%s" "$st" | json_escape)" \
        "$has_key"
      ((i++))
    done; echo
    echo "  ]"
    echo "}"
  } > "$JSON"
fi

# -------- Final --------
echo
echo "DONE ✅"
[[ "$FORMAT" == "both" || "$FORMAT" == "txt"  ]] && echo " - Text report : $TXT"
[[ "$FORMAT" == "both" || "$FORMAT" == "json" ]] && echo " - JSON report : $JSON"
echo
echo "Tải về từ remote (ví dụ user@host):"
[[ "$FORMAT" == "both" || "$FORMAT" == "txt"  ]] && echo "  scp user@host:$TXT ."
[[ "$FORMAT" == "both" || "$FORMAT" == "json" ]] && echo "  scp user@host:$JSON ."
echo
echo "Hoặc dùng curl/wget (nếu đã copy file ra web dir của server):"
echo "  curl -O http://<server>/$(basename "$TXT")"
echo "  curl -O http://<server>/$(basename "$JSON")"
echo "  wget http://<server>/$(basename "$TXT")"
echo "  wget http://<server>/$(basename "$JSON")"
echo
# bash -n ssh.sh  # (gợi ý bật trong CI)
