#!/usr/bin/env bash
# ssh-audit.sh — Siêu chi tiết audit SSH (NO PLAINTEXT PASSWORDS)
# Usage: sudo ./ssh-audit.sh [--redact]
# Outputs: /tmp/ssh-audit-<TIMESTAMP>.txt and .json
set -euo pipefail

REDACT=false
for arg in "$@"; do
  case "$arg" in
    --redact) REDACT=true ;;
  esac
done

TS="$(date +%Y%m%d-%H%M%S)"
OUT_TXT="/tmp/ssh-audit-${TS}.txt"
OUT_JSON="/tmp/ssh-audit-${TS}.json"

# helpers
echo_and_log(){ printf "%s\n" "$1" | tee -a "$OUT_TXT"; }
json_kv(){ printf '"%s": %s,' "$1" "$2"; } # naive helper for quick json (final cleaned)

# start fresh
: > "$OUT_TXT"
: > "$OUT_JSON"

echo_and_log "SSH AUDIT REPORT - $TS"
echo_and_log "Generated by: $(whoami) on $(hostname) ($(uname -a))"
echo_and_log "CWD: $(pwd)"
echo_and_log "----"

# Basic system & network
echo_and_log "== System info =="
echo_and_log "Hostname: $(hostname)"
echo_and_log "Uptime: $(uptime -p 2>/dev/null || uptime 2>/dev/null)"
echo_and_log "Kernel: $(uname -srmo)"
echo_and_log "Date: $(date -R)"
echo_and_log ""

echo_and_log "== Network interfaces (IPv4/IPv6) =="
if command -v ip >/dev/null 2>&1; then
  ip -brief address | tee -a "$OUT_TXT"
else
  ifconfig 2>/dev/null | tee -a "$OUT_TXT" || true
fi
echo_and_log ""

# Public IP (best-effort; may fail if no outbound)
echo_and_log "== Public IP (best-effort) =="
PUBIP="$(curl -fsS --max-time 8 ifconfig.co 2>/dev/null || curl -fsS --max-time 8 ifconfig.me 2>/dev/null || true)"
if [ -n "$PUBIP" ]; then
  echo_and_log "Public IP: $PUBIP"
else
  echo_and_log "Public IP: (could not determine - no outbound or curl blocked)"
fi
echo_and_log ""

# SSH versions + service
echo_and_log "== SSH client/server versions =="
ssh -V 2>&1 | tee -a "$OUT_TXT" || true
if command -v systemctl >/dev/null 2>&1; then
  if systemctl list-units --type=service --all | grep -qE 'sshd|ssh'; then
    echo_and_log ""
    echo_and_log "== sshd service status =="
    systemctl status sshd --no-pager 2>&1 | sed -n '1,6p' | tee -a "$OUT_TXT" || systemctl status ssh --no-pager 2>&1 | sed -n '1,6p' | tee -a "$OUT_TXT" || true
  fi
else
  ps aux | grep -E '[s]shd' | tee -a "$OUT_TXT" || true
fi
echo_and_log ""

# sshd_config (important lines + full optional)
SSHD_CONF="/etc/ssh/sshd_config"
echo_and_log "== sshd_config (important settings) =="
if [ -r "$SSHD_CONF" ]; then
  grep -E "^(Port|ListenAddress|PermitRootLogin|PasswordAuthentication|PubkeyAuthentication|PermitEmptyPasswords|MaxAuthTries|AllowUsers|AllowGroups|Match)" "$SSHD_CONF" 2>/dev/null | sed '/^\s*#/d' | tee -a "$OUT_TXT" || true
else
  echo_and_log "Cannot read $SSHD_CONF"
fi
echo_and_log ""

# show entire config if not redact
if [ "$REDACT" = false ]; then
  echo_and_log "== Full sshd_config (raw) =="
  [ -r "$SSHD_CONF" ] && sed -n '1,300p' "$SSHD_CONF" | tee -a "$OUT_TXT" || true
  echo_and_log ""
else
  echo_and_log "(full sshd_config omitted due to --redact)"
  echo_and_log ""
fi

# Host key fingerprints
echo_and_log "== Host key fingerprints =="
for f in /etc/ssh/*_key.pub 2>/dev/null; do
  [ -f "$f" ] || continue
  if [ "$REDACT" = false ]; then
    echo_and_log "--- $f ---"
    ssh-keygen -lf "$f" 2>/dev/null | tee -a "$OUT_TXT" || true
  else
    ssh-keygen -lf "$f" 2>/dev/null | sed 's/ .*/ (fingerprint)/' | tee -a "$OUT_TXT" || true
  fi
done
echo_and_log ""

# Listening sockets
echo_and_log "== Listening sockets (ssh related) =="
if command -v ss >/dev/null 2>&1; then
  ss -tnlp | grep -E 'sshd|:22' || ss -tnlp | tee -a "$OUT_TXT" || true
else
  netstat -tnlp 2>/dev/null | grep -E 'sshd|:22' || true
fi
echo_and_log ""

# Active sessions
echo_and_log "== Active SSH sessions / users =="
who | tee -a "$OUT_TXT" || true
echo_and_log ""
echo_and_log "== w / lastlog summary =="
if command -v w >/dev/null 2>&1; then
  w -hs | tee -a "$OUT_TXT" || true
fi
last -n 10 | tee -a "$OUT_TXT" || true
echo_and_log ""

# Recent sshd logs (best-effort)
echo_and_log "== Recent sshd logs (auth) =="
if command -v journalctl >/dev/null 2>&1; then
  journalctl -u sshd -n 300 --no-pager 2>/dev/null | tee -a "$OUT_TXT" || journalctl -u ssh -n 300 --no-pager 2>/dev/null | tee -a "$OUT_TXT" || true
else
  # fallback to auth.log (Debian/Ubuntu)
  if [ -r /var/log/auth.log ]; then
    tail -n 300 /var/log/auth.log | grep -E 'sshd|ssh' | tee -a "$OUT_TXT" || true
  elif [ -r /var/log/secure ]; then
    tail -n 300 /var/log/secure | grep -E 'sshd|ssh' | tee -a "$OUT_TXT" || true
  else
    echo_and_log "(no journalctl and no auth log readable)"
  fi
fi
echo_and_log ""

# Parse logs for accepted/failed auth summary
echo_and_log "== Authentication summary (from logs) =="
if command -v journalctl >/dev/null 2>&1; then
  journalctl -u sshd --no-pager 2>/dev/null | awk '/Accepted/{acc++} /Failed/{fail++} END{print "Accepted:",acc+0,"Failed:",fail+0}' | tee -a "$OUT_TXT" || true
else
  if [ -r /var/log/auth.log ]; then
    awk '/Accepted/ {a++} /Failed/ {b++} END{print "Accepted:",a+0,"Failed:",b+0}' /var/log/auth.log | tee -a "$OUT_TXT" || true
  else
    echo_and_log "(cannot summarize auth logs)"
  fi
fi
echo_and_log ""

# Users & password state (no plaintext)
echo_and_log "== Local users (UID >= 1000) and shell =="
awk -F: '($3>=1000 && $1!="nobody"){print $1":"$6":"$7}' /etc/passwd | tee -a "$OUT_TXT" || true
echo_and_log ""

echo_and_log "== User authentication status (passwd -S or shadow symbol) =="
while IFS=: read -r user _ uid _ _ home shell; do
  [ "$uid" -ge 1000 ] || continue
  status="(no passwd -S)"
  if command -v passwd >/dev/null 2>&1; then
    status="$(passwd -S "$user" 2>/dev/null || echo "(no info)")"
  else
    # try shadow quick check (no plaintext, only locked marker '!' or '*')
    if [ -r /etc/shadow ]; then
      shadowline="$(grep -E "^${user}:" /etc/shadow || true)"
      if [ -n "$shadowline" ]; then
        pwfield="$(echo "$shadowline" | cut -d: -f2)"
        case "$pwfield" in
          ''|*'!'*|*'*'*) status="LOCKED/NO-PASSWORD(contains ! or *)" ;;
          *) status="HAS-PASSWORD-HASH" ;;
        esac
      fi
    fi
  fi
  echo_and_log "$user -> $status"
done < <(awk -F: '{print $1":"$2":"$3":"$4":"$5":"$6":"$7}' /etc/passwd)
echo_and_log ""

# Root account status (no plaintext)
echo_and_log "== Root account status =="
if id -u root >/dev/null 2>&1; then
  if command -v passwd >/dev/null 2>&1; then
    passwd -S root 2>/dev/null | tee -a "$OUT_TXT" || true
  else
    echo_and_log "(passwd not available to check root status)"
  fi
  if [ -r /etc/shadow ]; then
    grep -E '^root:' /etc/shadow | awk -F: '{print "shadow_pw_field:",$2}' | sed 's/^/root shadow: /' | tee -a "$OUT_TXT" || true
    echo_and_log "(note: above is shadow field; it is NOT a plaintext password; do NOT share it publicly)"
  fi
else
  echo_and_log "No root user? weird."
fi
echo_and_log ""

# authorized_keys per user (may be sensitive)
echo_and_log "== authorized_keys (per user) =="
for d in /home/* /root; do
  [ -d "$d" ] || continue
  user="$(basename "$d")"
  ak="$d/.ssh/authorized_keys"
  if [ -f "$ak" ]; then
    if [ "$REDACT" = false ]; then
      echo_and_log "--- $user ($ak) ---"
      nl -ba "$ak" | sed -n '1,200p' | tee -a "$OUT_TXT" || true
    else
      echo_and_log "--- $user ($ak) --- (redacted)"
    fi
  fi
done
echo_and_log ""

# Sudoers summary
echo_and_log "== Sudoers (relevant lines) =="
if [ -r /etc/sudoers ]; then
  grep -E -v '^\s*#' /etc/sudoers | sed -n '1,80p' | tee -a "$OUT_TXT" || true
fi
if [ -d /etc/sudoers.d ]; then
  echo_and_log "-- /etc/sudoers.d --"
  for f in /etc/sudoers.d/*; do
    [ -f "$f" ] || continue
    echo_and_log "-> $(basename "$f"):"
    sed -n '1,60p' "$f" | sed -n '1,60p' | tee -a "$OUT_TXT" || true
  done
fi
echo_and_log ""

# PAM / password policy checks
echo_and_log "== Password policy / PAM hints =="
if [ -r /etc/login.defs ]; then
  grep -E 'PASS_MAX|PASS_MIN|PASS_WARN' /etc/login.defs | tee -a "$OUT_TXT" || true
fi
if command -v chage >/dev/null 2>&1; then
  echo_and_log "chage -l root (if available):"
  chage -l root 2>/dev/null | tee -a "$OUT_TXT" || true
fi
echo_and_log ""

# SSH daemon config summary for auth methods
echo_and_log "== Authentication methods policy (from sshd_config) =="
grep -Ei 'PasswordAuthentication|PubkeyAuthentication|ChallengeResponseAuthentication|UsePAM|AuthenticationMethods' "$SSHD_CONF" 2>/dev/null | sed '/^\s*#/d' | tee -a "$OUT_TXT" || true
echo_and_log ""

# Final: Connection recommendations (no passwords)
echo_and_log "== CONNECTION INFO SUGGESTIONS (do NOT contain plaintext passwords) =="
# gather listening addresses and ports
LISTENINGS="$(ss -tnlp 2>/dev/null | awk '/sshd|:22/ {print $4}' | sort -u || true)"
if [ -z "$LISTENINGS" ]; then
  # try netstat
  LISTENINGS="$(netstat -tnlp 2>/dev/null | awk '/sshd|:22/ {print $4}' | sort -u || true)"
fi
if [ -n "$LISTENINGS" ]; then
  echo_and_log "Listening endpoints:"
  echo "$LISTENINGS" | while read -r ep; do
    echo_and_log "  - $ep"
  done
else
  echo_and_log "(no obvious sshd listening endpoints found)"
fi

# local IP suggestion
LOCAL_IP="$(ip -4 -o addr show scope global 2>/dev/null | awk '{print $4}' | cut -d/ -f1 | head -n1 || hostname -I | awk '{print $1}' || true)"
[ -n "$LOCAL_IP" ] && echo_and_log "Local IP (example): $LOCAL_IP"
[ -n "$PUBIP" ] && echo_and_log "Public IP (example): $PUBIP"

# candidate users who can be used for connection
echo_and_log "Candidate users (shells and non-locked):"
awk -F: '($3>=1000){print $1}' /etc/passwd | while read -r u; do
  st="unknown"
  if command -v passwd >/dev/null 2>&1; then
    st="$(passwd -S "$u" 2>/dev/null || true)"
  fi
  # check if has authorized_key
  if [ -f "/home/${u}/.ssh/authorized_keys" ] || [ -f "/root/.ssh/authorized_keys" ] && [ "$u" = "root" ]; then
    keyinfo="has_authorized_keys"
  else
    keyinfo="no_authorized_keys"
  fi
  echo_and_log "  - $u : $st ; $keyinfo"
done
# check root separately
if id -u root >/dev/null 2>&1; then
  rootst="$(passwd -S root 2>/dev/null || true)"
  echo_and_log "  - root : $rootst"
fi

echo_and_log ""
echo_and_log "== IMPORTANT SECURITY NOTES =="
echo_and_log " - Script WILL NOT and CANNOT reveal plaintext passwords."
echo_and_log " - If PasswordAuthentication is 'yes' and an account is unlocked, remote login with a password may be possible (if you know the password)."
echo_and_log " - If PubkeyAuthentication is 'yes' and user has authorized_keys, publickey auth should work (share public key to /home/user/.ssh/authorized_keys)."
echo_and_log " - To securely share connection info with someone: share only (IP, PORT, USER) and either a one-time password or a public key, never share private keys or shadow fields."
echo_and_log ""

# Save a compact JSON summary (best-effort)
echo "{" > "$OUT_JSON"
printf '"generated_at":"%s",' "$TS" >> "$OUT_JSON"
printf '"hostname":"%s",' "$(hostname -f 2>/dev/null || hostname)" >> "$OUT_JSON"
printf '"local_ip":"%s",' "$LOCAL_IP" >> "$OUT_JSON"
printf '"public_ip":"%s",' "$PUBIP" >> "$OUT_JSON"
# sshd port detection (best-effort)
PORT="$(awk '/^Port/ {print $2; exit}' "$SSHD_CONF" 2>/dev/null || echo 22)"
printf '"sshd_port": %s,' "$PORT" >> "$OUT_JSON"
# auth policy
PA="$(grep -Ei '^PasswordAuthentication' "$SSHD_CONF" 2>/dev/null | awk '{print $2}' || echo unknown)"
PK="$(grep -Ei '^PubkeyAuthentication' "$SSHD_CONF" 2>/dev/null | awk '{print $2}' || echo unknown)"
printf '"password_auth": "%s",' "$PA" >> "$OUT_JSON"
printf '"pubkey_auth": "%s",' "$PK" >> "$OUT_JSON"

# simple user array
printf '"users": [' >> "$OUT_JSON"
first=true
while read -r u; do
  [ -z "$u" ] && continue
  if [ "$first" = true ]; then first=false; else printf ',' >> "$OUT_JSON"; fi
  st="$(passwd -S "$u" 2>/dev/null || echo 'noinfo')"
  ak="false"
  [ -f "/home/${u}/.ssh/authorized_keys" ] && ak="true"
  printf '{"user":"%s","passwd_status":"%s","has_authorized_keys":%s}' "$u" "$st" "$ak" >> "$OUT_JSON"
done < <(awk -F: '($3>=1000){print $1}' /etc/passwd)
printf '],' >> "$OUT_JSON"

# final note
printf '"note":"This JSON intentionally excludes any plaintext passwords and redacts sensitive keys if --redact was used."' >> "$OUT_JSON"
echo "}" >> "$OUT_JSON"

echo_and_log "DONE. Outputs:"
echo_and_log " - Text report: $OUT_TXT"
echo_and_log " - JSON summary: $OUT_JSON"
echo_and_log ""
echo_and_log "If you want:"
echo_and_log " - shareable (redacted) report: run again with --redact"
echo_and_log " - export minimal connection info only: run `sudo ./ssh-audit.sh | sed -n '/CONNECTION INFO SUGGESTIONS/,$p'`"
echo_and_log ""
echo_and_log "Warnings:"
echo_and_log " - DON'T paste these outputs (esp. any host keys, authorized_keys content, or shadow fields) on public forums."
echo_and_log " - If you need help interpreting the report, paste only the non-sensitive parts or use --redact."
